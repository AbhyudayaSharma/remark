.TH "MDAST" "3" "April 2015" "" ""
.SH "NAME"
\fBmdast\fR \- Markdown processor
.SH SYNOPSIS
.P
.RS 2
.nf
var mdast = require('mdast');
var yamlConfig = require('mdast\-yaml\-config');

// Use a plugin\.  mdast\-yaml\-config allows settings in YAML frontmatter\.
var processor = mdast()\.use(yamlConfig);

// Parse, modify, and stringify the document:
var doc = processor\.process(
    '\-\-\-\\n' +
    'mdast:\\n' +
    '  commonmark: true\\n' +
    '\-\-\-\\n' +
    '\\n' +
    '2) Some *emphasis*, **strongness**, and `code`\.\\n'
);
.fi
.RE
.SH DESCRIPTION
.P
This is the application programming interface documentation for \fBmdast\fR\|\.  To find documentation for the command line interface, see \fBman 1 mdast\fR\|\.
.SS mdast\.use(plugin, options?)
.P
Change the way \fBmdast\fR functions by using a plugin\.  Plugins are documented at <https://github\.com/wooorm/mdast/blob/master/doc/Plugins\.md>\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBprocessor = mdast\.use(plugin, options?)\fR;
.IP \(bu 2
\fBprocessor = mdast\.use(plugins)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBplugin\fR (\fBFunction\fR) \-\- Plugin\.
.IP \(bu 2
\fBplugins\fR (\fBArray\.<Function>\fR) \-\- List of plugins\.
.IP \(bu 2
\fBoptions\fR (\fBObject?\fR) \-\- Passed to plugin\.  Specified by its documentation\.

.RE
.P
\fBReturns\fR
.P
\fBObject\fR \-\- An instance of \fBmdast\fR\|\.  The instance functions just like the \fBmdast\fR library itself (it has the same methods), but caches the \fBuse\fRd plugins\.
.SS mdast\.parse(file, options?)
.P
Parse a markdown document into an abstract syntax tree\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBast = mdast\.parse(value, options?)\fR;
.IP \(bu 2
\fBast = mdast\.parse(file, options?)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBfile\fR (\fBFile\fR) \-\- File object\.
.IP \(bu 2
\fBvalue\fR (\fBstring\fR) \-\- Source of a (virtual) file\.
.IP \(bu 2
\fBoptions\fR (\fBObject\fR) \-\- Settings\.  See \fBman 7 mdastconfig\fR\|\.

.RE
.P
\fBReturns\fR
.P
\fBObject\fR \-\- Node\.  Nodes are documented at <https://github\.com/wooorm/mdast/blob/master/doc/Nodes\.md>\.
.SS mdast\.run(ast, file, done?)
.P
Modify an abstract syntax tree by applying plugins to it\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBast = mdast\.run(ast, value?, done?)\fR;
.IP \(bu 2
\fBast = mdast\.run(ast, file?, done?)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBast\fR (\fBObject\fR) \-\- Syntax tree as returned by \fBparse()\fR;
.IP \(bu 2
\fBfile\fR (\fBFile\fR) \-\- File object representing the input file;
.IP \(bu 2
\fBvalue\fR (\fBstring\fR) \-\- Source of the (virtual) input file;
.IP \(bu 2
\fBdone\fR (\fBfunction done(err?, doc?, file?)\fR)\.

.RE
.P
\fBReturns\fR
.P
\fBObject\fR \-\- Given AST\.
.SS mdast\.stringify(ast, options?)
.P
Compile an abstract syntax tree into a document\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBdoc = mdast\.stringify(ast, options?)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBast\fR (\fBObject\fR) \-\- Syntax tree as returned by \fBparse()\fR;
.IP \(bu 2
\fBoptions\fR (\fBObject\fR) \-\- Settings\.  See \fBman 7 mdastconfig\fR\|\.

.RE
.P
\fBReturns\fR
.P
\fBstring\fR \-\- Document\.  Formatted in markdown by default, or in whatever a plugin generates\.
.SS mdast\.process(file, options?, done?)
.P
Parse, modify, and compile a markdown document it into something else\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBdoc = mdast\.process(value, options?, done?)\fR;
.IP \(bu 2
\fBdoc = mdast\.process(file, options?, done?)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBfile\fR (\fBFile\fR) \-\- File object\.
.IP \(bu 2
\fBvalue\fR (\fBstring\fR) \-\- Source of a (virtual) file\.
.IP \(bu 2
\fBoptions\fR (\fBObject\fR) \-\- Settings\.  See \fBman 7 mdastconfig\fR\|\.
.IP \(bu 2
\fBdone\fR (\fBfunction done(err?, doc?, file?)\fR)\.

.RE
.P
\fBReturns\fR
.P
\fBstring\fR \-\- Document\.  Formatted in markdown by default, or in whatever a plugin generates\.
.SS function done(err?, doc?, file?)
.P
Invoked when processing is complete\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBfunction done(err)\fR;
.IP \(bu 2
\fBfunction done(null, doc, file)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBexception\fR (\fBError\fR) \-\- Failure;
.IP \(bu 2
\fBdoc\fR (\fBstring\fR) \-\- Document generated by the process;
.IP \(bu 2
\fBfile\fR (\fBFile\fR) \-\- File object representing the input file;

.RE
.P
\fBReturns\fR
.P
\fBstring\fR \-\- Document\.  Formatted in markdown by default, or in whatever a plugin generates\.
.SS File()
.P
File objects make it easy to change the directory, name, or extension of a file: let's say multiple markdown files are converted to HTML\.  Instead of overwriting the markdown sources, file objects make it easy to output files with a different (\fB"html"\fR) extension\.  In addition, files expose the raw source to plugins\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBfile = File(options?)\fR;
.IP \(bu 2
\fBfile = File(value?)\fR;
.IP \(bu 2
\fBfile = File(file)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBvalue\fR (\fBstring\fR) \-\- Contents of the file;
.IP \(bu 2
\fBfile\fR (\fBFile\fR) \-\- Existing representation, immediately returned;
.IP \(bu 2
\fBoptions\fR (\fBObject\fR): Parts:
.RS 0
.IP \(bu 2
\fBdirectory\fR (\fBstring\fR, default: \fB\|''\fR) \-\- Parent directory;
.IP \(bu 2
\fBfilename\fR (\fBstring?\fR, default: \fBnull\fR) \-\- Name, without extension;
.IP \(bu 2
\fBextension\fR (\fBstring\fR, default: \fB\|'md'\fR) \-\- Extension, without dot;
.IP \(bu 2
\fBcontents\fR (\fBstring\fR, default: \fB\|''\fR) \-\- Raw value\.

.RE

.RE
.P
\fBReturns\fR
.P
\fBFile\fR \-\- Instance\.
.SS File#toString()
.P
Getter for internal \fBcontents\fR property\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBvalue = file\.toString()\fR\|\.

.RE
.P
\fBReturns\fR
.P
\fBstring\fR \-\- Contents\.
.SS File#exception(reason, position?)
.P
Create an error\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBerr = file\.exception(reason, node?)\fR;
.IP \(bu 2
\fBerr = file\.exception(reason, location?)\fR;
.IP \(bu 2
\fBerr = file\.exception(reason, position?)\fR\|\.

.RE
.P
\fBParameters\fR
.RS 0
.IP \(bu 2
\fBreason\fR (\fBstring\fR) \-\- Failure reason;
.IP \(bu 2
\fBnode\fR (\fBNode\fR) \-\- Syntax tree object;
.IP \(bu 2
\fBlocation\fR (\fBObject\fR) \-\- Syntax tree location (found at \fBnode\.position\fR);
.IP \(bu 2
\fBposition\fR (\fBObject\fR) \-\- Syntax tree position (found at \fBnode\.position\.start\fR)\.

.RE
.P
\fBReturns\fR
.P
\fBError\fR \-\- Pretty error with location information\.
.P
This object has the following properties:
.RS 0
.IP \(bu 2
\fBfile\fR (\fBstring?\fR) \-\- Filename (including extension), if applicable;
.IP \(bu 2
\fBreason\fR (\fBstring\fR) \-\- Same as what was passed in;
.IP \(bu 2
\fBline\fR (\fBnumber\fR) \-\- Starting line of exception;
.IP \(bu 2
\fBcolumn\fR (\fBnumber\fR) \-\- Starting column of exception\.

.RE
.SS File#getFile()
.P
Get the filename, with extension, if applicable\.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 2
\fBfilename? = file\.getFile()\fR\|\.

.RE
.P
\fBReturns\fR
.P
\fBstring?\fR \-\- If the \fBfile\fR has a \fBfilename\fR, it will be concatenated with the (dotted) extension (if applicable)\.  Otherwise, null is returned\.
.SH BUGS
.P
<https://github\.com/wooorm/mdast/issues>
.SH SEE ALSO
.P
\fBmdast\fR(1), \fBmdastconfig\fR(7)\.
.SH AUTHOR
.P
Written by Titus Wormer <mailto:tituswormer@gmail\.com>

